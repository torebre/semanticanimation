buildscript {
    ext.web_dir = 'web'

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }


}

//group 'com.kjipo'
//version '0.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin2js'
// For running node scripts
apply plugin: 'com.moowork.node'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
//    compile 'org.jetbrains:kotlin-styled:1.0.0-pre.65-kotlin-1.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//compileKotlin2Js {
//    kotlinOptions.outputFile = "${projectDir}/web/output.js"
//    kotlinOptions.moduleKind = "amd"
//    kotlinOptions.sourceMap = true
//}



compileKotlin2Js {
    kotlinOptions {
        metaInfo = true
        sourceMap = true
        sourceMapEmbedSources = 'always'
        moduleKind = 'commonjs'
        main = 'com.kjipo.trellis.MatrixWebAnimation'
    }
}

//    task assembleWeb(type: Sync) {
//        configurations.compile.each { File file ->
//            from(zipTree(file.absolutePath), {
//                includeEmptyDirs = false
//                include { fileTreeElement ->
//                    def path = fileTreeElement.path
//                    path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
//                            !path.startsWith("META-INF/"))
//                }
//            })
//        }
//        from compileKotlin2Js.destinationDir
//        into "${projectDir}/web"
//
//        dependsOn classes
//    }
//
//    assemble.dependsOn assembleWeb


node {
    download = true
}



task yarnInstall(type: YarnTask) {
    args = ['install']
}

// Creates minified, packed main.bundle.js at build/dist
task bundle(type: YarnTask, dependsOn: [runDceKotlinJs, yarnInstall]) {
    args = ["run", "bundle"]
    assemble.dependsOn bundle
}


// Copies files from src/main/resouces to build/dist. These resources will be served by dev server
task copyStaticResources(type: Copy) {
    from sourceSets.main.resources
    into "${buildDir}/dist"
    bundle.dependsOn copyStaticResources
}


// Extracts JS libs from included dependencies to node_modules in build directory:
task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}


// Starts dev server that serves built application in dev mode
task run(type: YarnTask, dependsOn: [copyStaticResources, populateNodeModules, yarnInstall]) {
    args = ["run", "start"]
}
