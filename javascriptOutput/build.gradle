buildscript {
    ext.kotlin_version = '1.2.51'
    ext.web_dir = 'web'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }


}

//group 'com.kjipo'
//version '0.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin2js'

sourceCompatibility = 1.9

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//compileKotlin2Js {
//    kotlinOptions.outputFile = "${projectDir}/web/output.js"
//    kotlinOptions.moduleKind = "amd"
//    kotlinOptions.sourceMap = true
//}




    task assembleWeb(type: Sync) {
        configurations.compile.each { File file ->
            from(zipTree(file.absolutePath), {
                includeEmptyDirs = false
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                            !path.startsWith("META-INF/"))
                }
            })
        }
        from compileKotlin2Js.destinationDir
        into "${projectDir}/web"

        dependsOn classes
    }

    assemble.dependsOn assembleWeb


//build.doLast() {
//    // Copy kotlin.js and kotlin-meta.js from jar into web directory
//    configurations.compile.each { File file ->
//        copy {
//            includeEmptyDirs = false
//
//            from zipTree(file.absolutePath)
//            into "${projectDir}/${web_dir}/lib"
//            include { fileTreeElement ->
//                def path = fileTreeElement.path
//                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
//            }
//        }
//    }
//
//    // Unpack build contents
//    // TODO Remove this step when a CDN link is available.
//    copy {
//        File artifact = new File("build/libs/${project.name}-${project.version}.jar")
//        includeEmptyDirs = false
//
//        from zipTree(artifact)
//        into "${web_dir}"
//        include { fileTreeElement ->
//            def path = fileTreeElement.path
//            !(path.startsWith("META-INF/") || path.startsWith("${project.name}"))
//        }
//    }
//
//    // Copy scripts to web directory
//    copy {
//        includeEmptyDirs = false
//        from new File("build/classes/main")
//        into "${web_dir}/lib"
//    }
//
//    copy {
//        includeEmptyDirs = false
//        from new File("build/classes/test")
//        into "${web_dir}/lib"
//    }
//
//    copy {
//        includeEmptyDirs = false
//        from new File("build/resources/test")
//        into "${web_dir}"
//    }
//}